{"paging":{"is_end":false,"next":"https://www.zhihu.com/comments/568642143/child_comments?include=%24%5B%2A%5D.author%2Creply_to_author%2Ccontent%2Cvote_count\u0026include=%24%5B%2A%5D.author%2Creply_to_author%2Ccontent%2Cvote_count\u0026limit=1\u0026offset=6\u0026tdsourcetag=s_pctim_aiomsg","previous":"https://www.zhihu.com/comments/568642143/child_comments?include=%24%5B%2A%5D.author%2Creply_to_author%2Ccontent%2Cvote_count\u0026include=%24%5B%2A%5D.author%2Creply_to_author%2Ccontent%2Cvote_count\u0026limit=1\u0026offset=4\u0026tdsourcetag=s_pctim_aiomsg","totals":6},"data":[{"id":569032022,"type":"comment","url":"https://www.zhihu.com/comments/569032022","vote_count":0,"voting":false,"created_time":1546412370,"is_delete":false,"resource_type":"answer","content":"\u003cp\u003e我今天突然想到了一个新的想法。实际上我想表达的意思类似于C++ Reference Number。也就是给每个集的元素增加一个引用计数，当使用的时候这个引用计数会-1，用完归还则+1。a的计数为0的时候，无法再次取出a。\u003c/p\u003e\u003cp\u003e举个例子，{a(∞),b(∞)}表明可以无限次同时取出a或者b，这个集本质是{a,a,a....,b,b,b....}，但它实际上是目前集合的表现法。\u003c/p\u003e\u003cp\u003e而{a(1),b(1)}则为{a,b}的写法，这里不是集合。{a(2),b(3)}={a,a,b,b,b}\u003c/p\u003e\u003cp\u003e还有另一种定义法，表示元素直接被多少个大括号包含。\u003c/p\u003e\u003cp\u003e比如{a[1],b[1]} = {{a},{b}}\u003c/p\u003e\u003cp\u003e{a[0],b[1],c[0]}={a,{b},c}\u003c/p\u003e\u003cp\u003e通过这两种表示法，貌似所有空集组合的集合都可以被表示出来。\u003c/p\u003e","author":{"role":"normal","member":{"id":"8e45364b3e363dc02e487c4ef94a64a1","url":"https://www.zhihu.com/people/8e45364b3e363dc02e487c4ef94a64a1","name":"basicquant","headline":"量化交易研究爱好者。","gender":1,"avatar_url":"https://pic4.zhimg.com/50/v2-79c71c1bc63ea507b398923f03b1fb08_s.jpg","type":"people","user_type":"people","badge":[],"is_following":false,"is_followed":false}},"is_author":false,"allow_like":true,"allow_delete":false,"replies_count":0,"can_recommend":false,"can_collapse":false,"reply_to_author":{"role":"author","member":{"id":"0","url":"","name":"匿名用户","headline":"","gender":0,"avatar_url":"https://pic1.zhimg.com/aadd7b895_s.jpg","type":"people","user_type":"people","badge":null}},"extra_info":{}}]}
